<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="834" />
    <option name="newTranslationDialogWidth" value="1150" />
    <option name="newTranslationDialogX" value="1259" />
    <option name="newTranslationDialogY" value="345" />
    <histories>
      <item value="Failed to create a virtual environment" />
      <item value="signature" />
      <item value="We’re thrilled to invite you to start testing GitHub Copilot. Your feedback will help us make it even better.&#10;Click the link below to visit the GitHub Copilot documentation, and install the extension. The page has all the information you need to get started.&#10;" />
      <item value="Consider defining a bean of type" />
      <item value="That is, install node-gyp globally and make the npm config variable node_gyp point to node-gyp.js.&#10;How to undo this after node-gyp is integrated into npm" />
      <item value="momitor" />
      <item value="mo" />
      <item value="deprecate" />
      <item value="Syncing Ethereum is a pain point for many people, so I'll try to detail what's happening behind the scenes so there might be a bit less confusion.&#10;&#10;The current default mode of sync for Geth is called fast sync. Instead of starting from the genesis block and reprocessing all the transactions that ever occurred (which could take weeks), fast sync downloads the blocks, and only verifies the associated proof-of-works. Downloading all the blocks is a straightforward and fast procedure and will relatively quickly reassemble the entire chain.&#10;&#10;Many people falsely assume that because they have the blocks, they are in sync. Unfortunately this is not the case, since no transaction was executed, so we do not have any account state available (ie. balances, nonces, smart contract code and data). These need to be downloaded separately and cross checked with the latest blocks. This phase is called the state trie download and it actually runs concurrently with the block downloads; alas it take a lot longer nowadays than downloading the blocks.&#10;&#10;So, what's the state trie? In the Ethereum mainnet, there are a ton of accounts already, which track the balance, nonce, etc of each user/contract. The accounts themselves are however insufficient to run a node, they need to be cryptographically linked to each block so that nodes can actually verify that the account's are not tampered with. This cryptographic linking is done by creating a tree data structure above the accounts, each level aggregating the layer below it into an ever smaller layer, until you reach the single root. This gigantic data structure containing all the accounts and the intermediate cryptographic proofs is called the state trie.&#10;&#10;Ok, so why does this pose a problem? This trie data structure is an intricate interlink of hundreds of millions of tiny cryptographic proofs (trie nodes). To truly have a synchronized node, you need to download all the account data, as well as all the tiny cryptographic proofs to verify that noone in the network is trying to cheat you. This itself is already a crazy number of data items. The part where it gets even messier is that this data is constantly morphing: at every block (15s), about 1000 nodes are deleted from this trie and about 2000 new ones are added. This means your node needs to synchronize a dataset that is changing 200 times per second. The worst part is that while you are synchronizing, the network is moving forward, and state that you begun to download might disappear while you're downloading, so your node needs to constantly follow the network while trying to gather all the recent data. But until you actually do gather all the data, your local node is not usable since it cannot cryptographically prove anything about any accounts.&#10;&#10;If you see that you are 64 blocks behind mainnet, you aren't yet synchronized, not even close. You are just done with the block download phase and still running the state downloads. You can see this yourself via the seemingly endless Imported state entries [...] stream of logs. You'll need to wait that out too before your node comes truly online." />
      <item value="Solidity" />
      <item value="grpc Endpoint Solidity" />
      <item value="交易对" />
      <item value="此活动已结束" />
      <item value="secure" />
      <item value="邀请" />
      <item value="The 'viewport' meta element 'content' attribute value should not contain 'user-scalable'" />
      <item value="TypeReferenced struct must contain a constructor with types that extend Type" />
      <item value="decode Static Struct" />
      <item value="receive" />
      <item value="partition" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="26" />
        <entry key="ENGLISH" value="21" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1654667844023" />
  </component>
</application>